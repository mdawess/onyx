# serverless.yml

service: apollo-lambda
plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-ignore
useDotenv: true
package:
  patterns:
    - '!integration'
    - '!types'
    - '!backend/src/index.ts'
provider:
  name: aws
  runtime: nodejs16.x
  region: ca-central-1
  environment:
    #postgre  
    PSQL_HOST: ${self:custom.PSQL.HOST}
    PSQL_PORT: ${self:custom.PSQL.PORT}
    #common
    DB_NAME: ${self:custom.DB_NAME}
    USERNAME: ${self:custom.USERNAME}
    PASSWORD: ${self:custom.PASSWORD}
    DB_USER: ${env:DB_USER}
    DB_ID: ${env:DB_ID}
    DB_PASSWORD: ${env:DB_PASSWORD}
    PROD_DB_NAME: ${env:PROD_DB_NAME}
    PROD_HOST: ${env:PROD_HOST}
    DB_PORT: ${env:DB_PORT}
custom:
  path: src/database/.env
  serverless-offline:
    httpPort: 4000
  DB_NAME: ${DB_NAME}
  USERNAME: ${DB_USER}
  PASSWORD: ${DB_PASSWORD}
  PSQL:
    HOST:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
    PORT:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]
resources:
  Resources:
    PostgreSqlRDSInstance: ${file(./resources/PostgreSqlRDSInstance.yml)}
    ServerlessSubnetGroup: ${file(./resources/serverlessSubnetGroup.yml)}
    ServerlessVPCGA: ${file(./resources/serverlessVPCGA.yml)}
    ServerlessVPC: ${file(./resources/serverlessVPC.yml)}
functions:
  api:
    handler: src/restHandler.handler
    environment:
      SLS_DEBUG: true
    events:
    - http:
        path: /
        method: get
        cors: true
        integration: lambda-proxy
    - http:
        path: /test
        method: get
        cors: true
        integration: lambda-proxy
    - http:
        path: /healthcheck
        method: get
        cors: true
        integration: lambda-proxy
    - http:
        path: /oauth
        method: get
        cors: true
        integration: lambda-proxy
    - http:
        path: /callback
        method: get
        cors: true
        integration: lambda-proxy
    - http:
        path: /refresh
        method: get
        cors: true
        integration: lambda-proxy
    - http:
        path: /logout
        method: get
        cors: true
        integration: lambda-proxy
  graphql:
    handler: src/handler.handler
    environment:
      SLS_DEBUG: true
    events:
    - http:
        path: /graphql
        method: post
        cors: true
        integration: lambda-proxy
    - http:
        path: /graphql
        method: get
        cors: true
        integration: lambda-proxy
